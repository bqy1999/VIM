#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
using namespace std;
#define end() return 0
const int maxn = 300 + 5;
const int INF = -(0x7f7f7f7f);
int n, nx, ny, w[maxn][maxn];
int match[maxn], lx[maxn], ly[maxn], slack[maxn];
bool visx[maxn], visy[maxn];
bool dfs(int x){
	visx[x] = true;
	for(int y = 1; y <= ny; y++){
		if(visy[y]) continue;
		int t = lx[x] + ly[y] - w[x][y];
		if(t == 0){
			visy[y] = true;
			if(match[y] == -1 || dfs(match[y])){
				match[y] = x;
				return true;
			}
		}
		else if(slack[y] > t){ //不在相等子图中slack取最小的
			slack[y] = t;
		}
	}return false;
}
int KM(){
	nx = ny = n;
	memset(match, -1, sizeof(match));
	memset(ly, 0, sizeof(ly));
	for(int i = 1; i <= nx; i++){ //lx 初始化为与它关联边中最大的
		lx[i] = -INF;
		for(int j = 1; j <= ny; j++){
			if(w[i][j] > lx[i]) lx[i] = w[i][j];
		}
	}
	for(int x = 1; x <= nx; x++){
		for(int i = 1; i <= ny; i++){
			slack[i] = INF;
		}
		while(true){
			memset(visx, false, sizeof(visx));
			memset(visy, false, sizeof(visy));
			//若成功(找到了增广路)，则该点增广完毕，下一个点进入增广
			if(dfs(x)) break;
			//若失败，则需要改变一些点的顶标，使得图中可行边的数量增加
			//(1)将所有在增广轨中的 X 方点的标号 全部减去一个常数 d ；
			//(2)将所有在增广轨中的 Y 方点的标号 全部加上一个常数 d ；
			int d = INF;
			for(int i = 1; i <= ny; i++){
				if(!visy[i] && d > slack[i]) d = slack[i];
			}
			for(int i = 1; i <= nx; i++){
				if(visx[i]) lx[i] -= d;
			}
			for(int i = 1; i <= ny; i++){
				if(visy[i]) ly[i] += d;
				else slack[i] -= d;
			}
		}
	}
	int res = 0;
	for(int i = 1; i <= ny; i++){
		if(match[i] > -1) res += w[match[i]][i];
	}
	return res;
}

void change(int x){
	n = x;
}

int p1[300][2], p2[300][2];

int main(){
	int m, n;
	scanf("%d %d", &m, &n);
	for(int i(1);i <= m;i++){
		scanf("%d %d", &p1[i][0], &p1[i][1]);
	}
	for(int i(1);i <= n;i++){
		scanf("%d %d", &p2[i][0], &p2[i][1]);
	}

	for(int i(1);i <= max(n, m);i++){
		for(int j(1);j <= max(n, m);j++){
			w[i][j] = 0;
		}
	}
	for(int i(1);i <= m;i++){
		for(int j(1);j <= n;j++){
			w[i][j] = abs(p1[i][0]-p2[j][0])+abs(p1[i][1]-p2[j][1]);
			w[i][j] = -w[i][j];
		}
	}

	change(max(n, m));

	printf("%d", -KM());
}
