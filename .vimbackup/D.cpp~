/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-12-18 10:32
* Filename      : D.fp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
#define maxm 1005
#define maxv 105
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;

int res[maxv][maxv];
int dis[maxv];
int n, s, t, ans;

inline int bfs(){
    int k = 0;
    queue<int> que;
    memset(dis, -1, sizeof(dis));
    dis[t] = 0;

    que.push(t);
    while(!que.empty()){
        k = que.front();
        que.pop();
        for(int i(0); i<=n+1; ++i){
            if(dis[i] == -1 && res[i][k]){
                dis[i] = dis[k] + 1;
                que.push(i);
            }
        }
        if(k == s) return 1;
    }
    return 0;
}

inline int dfs(int cur, int f){
    if(cur == t) return f;
    int tmp = f;
    int t;
    for(int i(0); i<=n+1 && tmp; ++i){
        if(dis[i]+1 == dis[cur] && res[cur][i]){
            t = dfs(i, min(res[cur][i], tmp));
            res[cur][i] -= t;
            res[i][cur] += t;
            tmp -= t;
        }
    }
    return f - tmp;
}

void dinic(){
    ans = 0;
    while(bfs()){
        ans += dfs(s, INF);
    }
}

int main(){
    int m, cnt, num = 0;
    int M[maxm];
    int k[maxm];
    while(~scanf("%d%d", &m ,&n)){
        memset(k, 0, sizeof(k));
        memset(res, 0, sizeof(res));
        for(int i(1); i<=m; ++i)
            scanf("%d", &M[i]);
        s = 0;
        t = n+1;
        for(int i(1); i<=n; ++i){
            scanf("%d", &cnt);
            for(int j(1); j<=cnt; ++j){
                scanf("%d", &num);
                if(!k[num])
                    res[s][i] += M[num];
                else
                    res[k[num]][i] = INF;
                k[num] = i;
            }
            scanf("%d", &num);
            res[i][t] = num;
        }
        n = t + 1;
        dinic();
        printf("%d\n", ans);
    }
    return 0;
}
